plugins {
    id 'java'
    id 'nebula.optional-base' version '3.1.0'
    id 'nebula.provided-base' version '3.1.0'
    id 'findbugs'
    id 'pmd'
    id 'jacoco'
    id 'nebula.info' version '3.4.1'
    id 'com.github.ben-manes.versions' version '0.13.0'
    id 'osgi'
    id 'maven'
    id 'nebula.nebula-javadoc-jar' version '2.2.2'
    id 'nebula.nebula-source-jar' version '2.2.2'
    id 'com.jfrog.bintray' version '1.7.3'
}

description = 'This project aims to provide the facility to easily implement JSON-RPC for the java programming language.'
version = '1.5.3'
group = 'com.github.jointyx'

sourceCompatibility = 1.7
targetCompatibility = 1.7

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}
test {
    maxParallelForks 5
}
compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

repositories {
    mavenCentral()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

wrapper {
    gradleVersion = "3.3"
    distributionType = Wrapper.DistributionType.ALL
}

install {
    repositories.mavenInstaller {
        pom.project {
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }
}

dependencies {
    ext {
        jacksonVersion = '2.8.5'
        springVersion = '4.3.5.RELEASE'
        springBotVersion = '1.4.3.RELEASE'
        jettyVersion = '9.4.0.RC3'
        slf4jVersion = '1.7.22'
    }

    compile 'net.iharder:base64:2.3.9'
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    provided 'javax.portlet:portlet-api:2.0'
    provided 'javax.servlet:javax.servlet-api:3.1.0'

    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"

    compile "org.springframework:spring-core:${springVersion}", optional
    compile "org.springframework:spring-context:${springVersion}", optional
    compile "org.springframework:spring-web:${springVersion}", optional
    compile "org.springframework:spring-webmvc:${springVersion}", optional

    compile 'commons-codec:commons-codec:1.10', optional
    compile 'org.apache.httpcomponents:httpcore-nio:4.4.5', optional

    testCompile 'junit:junit:4.12'
    testCompile 'org.easymock:easymock:3.4'
    testCompile("org.springframework.boot:spring-boot-starter-web:${springBotVersion}") {
        exclude module: 'logback-classic'
    }
    testCompile "org.springframework.boot:spring-boot-starter-test:${springBotVersion}"
    testCompile("org.eclipse.jetty:jetty-server:${jettyVersion}") {
        exclude module: 'javax.servlet'
    }
    testCompile("org.eclipse.jetty:jetty-servlet:${jettyVersion}") {
        exclude module: 'org.eclipse.jetty.orbit'
    }
    testRuntime 'org.apache.logging.log4j:log4j-slf4j-impl:2.7'
    testRuntime 'org.apache.logging.log4j:log4j-core:2.7'

}

jar {
    manifest {
        instruction 'Import-Package',
                'org.aopalliance.intercept;resolution:="optional"',
                'org.apache.http.*;resolution:="optional"',
                'org.springframework.*;resolution:="optional"',
                'org.apache.commons.logging;resolution:="optional"',
                'javax.portlet;resolution:="optional"',
                'javax.servlet*;version=0.0.0',
                '*'
    }
}

jacoco {
    toolVersion = '0.7.6.201602180812'
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}
